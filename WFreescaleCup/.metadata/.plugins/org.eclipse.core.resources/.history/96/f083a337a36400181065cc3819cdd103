
package ch.hearc.freescale.use.trames;

import ch.hearc.freescale.api.gui.presenter.annotation.container.DisplayGrid;
import ch.hearc.freescale.api.gui.presenter.annotation.jcomponent.DisplayCurveAbsolute;
import ch.hearc.freescale.api.gui.presenter.annotation.jcomponent.DisplayCurveRelatif;
import ch.hearc.freescale.api.gui.presenter.annotation.jcomponent.DisplayDigit;
import ch.hearc.freescale.api.gui.presenter.annotation.jcomponent.DisplayGauge;
import ch.hearc.freescale.api.gui.presenter.annotation.jcomponent.DisplayImageCurve;
import ch.hearc.freescale.api.gui.presenter.annotation.jcomponent.DisplayImageRoll;
import ch.hearc.freescale.api.gui.presenter.annotation.jcomponent.DisplayLevel;
import ch.hearc.freescale.api.protocol.Trame_I;

/**
 * Hypothese :
 *
 * 			La voiture envoie une trame contenant les valeures ordonnées suivantes :
 * 					Byte : AppID 	(constant pour une même trame)
 * 					Byte : TrameID 	(constant pour une même trame)
 * 					Float
 * 					Integer [-2^31, 2^31-1]
 * 					Short 	[-2^15, 2^15-1]
 * 					Byte	[-128, 127]
 * 					Image	Byte[143]
 *
 *
 * Contrainte :
 *
 * 			Implementer une classe :
 * 				(C1) avec les attribus ci-dessus
 * 				(C2) Avec un constructeur vide
 * 				(C3) Avec un contructeur plein
 * 				(C4) Implemantant Trame_I
 *				(C5) Choisir le layout avec l'une des annotations de classe suivantes :
 *						- @DisplayDeskop,
 *						- @DisplaySplit
 *						- @DisplayGrid
 *				(C6) Pour chaque paramètres choisir dnas quelle vue l'afficher avec une des annotatrion suivantes
 *						Pour un nombre :
 *							- @DisplayCurveAbsolute
 * 							- @DisplayCurveRelatif
 * 							- @DisplayDigit
 * 							- @DisplayGauge
 * 							- @DisplayLevel
 * 						Pour une image :
 * 							- @DisplayImageRoll
 * 							- @DisplayImageCurve
 *
 *
 * But :
 *
 * 			Afficher le contenu de la trame dans une fenêtre avec différentes vues
 *
 * Note :
 *
 * 			Voire pUse_Tuto_ClientConsole pour un affichage console
 * 			Voire pUse_Tuto_Server pour un l'utilisation du simulateur
 *
 */
@DisplayGrid
public class TrameReceived implements Trame_I
	{

	/*------------------------------------------------------------------*\
	|*							Constructeurs							*|
	\*------------------------------------------------------------------*/

	/**
	 * Constructeur "vide" obligatoire
	 */
	public TrameReceived()
		{
		//Rien
		}

	/**
	 * Constructeur "plein" obligatoire
	 */
	public TrameReceived(Float vitesseGauche, Float vitesseDroite, Float accelerationX, Float accelerationY, Float accelerationZ, Float champMagnetiqueX, Float champMagnetiqueY, Float champMagnetiqueZ, Float yaw, Float roll, Float pitch, Byte image, int alignement, Float sinus0a2)
		{
		this.vitesseGauche = vitesseGauche;
		this.vitesseDroite = vitesseDroite;
		this.accelerationX = accelerationX;
		this.accelerationY = accelerationY;
		this.accelerationZ = accelerationZ;
		this.champMagnetiqueX = champMagnetiqueX;
		this.champMagnetiqueY = champMagnetiqueY;
		this.champMagnetiqueZ = champMagnetiqueZ;
		this.yaw = yaw;
		this.roll = roll;
		this.pitch = pitch;
		this.image = image;
		this.alignement = alignement;
		this.sinus0a2 = sinus0a2;
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	@Override
	public String toString()
		{
		StringBuilder builder = new StringBuilder();
		builder.append("DemoTrame [vitesseGauche=");
		builder.append(this.vitesseGauche);
		builder.append(", vitesseDroite=");
		builder.append(this.vitesseDroite);
		builder.append(", accelerationX=");
		builder.append(this.accelerationX);
		builder.append(", accelerationY=");
		builder.append(this.accelerationY);
		builder.append(", accelerationZ=");
		builder.append(this.accelerationZ);
		builder.append(", champMagnetiqueX=");
		builder.append(this.champMagnetiqueX);
		builder.append(", champMagnetiqueY=");
		builder.append(this.champMagnetiqueY);
		builder.append(", champMagnetiqueZ=");
		builder.append(this.champMagnetiqueZ);
		builder.append(", yaw=");
		builder.append(this.yaw);
		builder.append(", roll=");
		builder.append(this.roll);
		builder.append(", pitch=");
		builder.append(this.pitch);
		builder.append(", image=");
		builder.append(this.image);
		builder.append(", alignement=");
		builder.append(this.alignement);
		builder.append(", sinus0a2=");
		builder.append(this.sinus0a2);
		builder.append("]");
		return builder.toString();
		}

	/*------------------------------*\
	|*				Get				*|
	\*------------------------------*/

	/**
	 * Le systeme embarquer peut envoyer des trames differentes, par exemple a des frequences differentes avec des attributs differents.
	 * Une trame possédant un meme contenu doit avoir le meme id
	 */
	@Override
	public byte getTrameID()
		{
		return 1;
		}

	/**
	 * Utiliser dans le GUI!
	 *
	 * Changer cette valeur pour ecraser les préférences des positions des graphiques dans le conteneur.
	 * Utile lorsqu'on enleve ou ajoute un attribut dans la classe, et plus globalement lorsque le nombre de graphique change
	 */
	@Override
	public byte getAppID()
		{
		return 10;
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	/*------------------------------------------------------------------*\
	|*							Attributs Private						*|
	\*------------------------------------------------------------------*/

	/*
	 * Les champs de la classe representent les paramète de la trame.
	 * Ils doivent être d'un des types suivants :
	 * 		-Float
	 * 		-Integer
	 * 		-Short
	 * 		-Byte
	 * 		-Image
	 * L'ordre des champs est importants
	 */

	/*
	 * Les annotations permettent d'afficher les valeures dans différents graphiques.
	 * Les annotations sont les suivantes :
	 * 		-@DisplayCurveAbsolute
	 * 		-@DisplayCurveRelatif
	 * 		-@DisplayDigit
	 * 		-@DisplayGauge
	 * 		-@DisplayLevel
	 * 		-@DisplayImageRoll
	 * 		-@DisplayImageCurve
	 */

	@DisplayCurveAbsolute(pointsToDisplay = 100, min = -1000, max = 1000)

	@DisplayCurveRelatif(pointsToDisplay = 150)

	@DisplayDigit(title = "Short Field", decimalCount = 0)

	//les a annotion sont cumulable. Il est donc possible d'afficher les même valeures dans plusieures view
	@DisplayGauge(min = -100, max = 100)
	@DisplayLevel(min = -100, max = 100)

	@DisplayImageRoll
	@DisplayImageCurve

	private Float vitesseGauche;
	private Float vitesseDroite;
	private Float accelerationX;
	@DisplayGauge
	private Float accelerationY;
	private Float accelerationZ;
	private Float champMagnetiqueX;
	private Float champMagnetiqueY;
	private Float champMagnetiqueZ;
	private Float yaw;
	private Float roll;
	private Float pitch;
	@DisplayImageRoll
	private Byte image;
	private Short alignement;
	@DisplayImageCurve
	private Float sinus0a2;
	}
